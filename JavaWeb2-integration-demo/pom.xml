<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  	
  	<!--
	一、maven私有仓库搭建可以使用nexus 
	二、maven&eclipse离线模式
	1、maven->conf->settings.xml
	<localRepository>C:\Users\he\.m2\repository</localRepository>
	2、mirror配置
	<mirror>
    		<id>central</id>
    		<mirrorOf>*</mirrorOf>
    		<name>central</name>
    		<url>file://C:\Users\admin\.m2\repository</url>
	</mirror>
	3、eclipse->window->Preferences->Maven->Installations和User Settings配置为本地maven路径
	三、maven国内镜像设置
	1、maven->conf->setting.xml配置：                  
	<mirror>           
	      <id>alimaven</id>              
	      <name>aliyun maven</name>            
	      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>                    
	      <mirrorOf>central</mirrorOf>                          
	</mirror>                
	2、eclipse配置：eclipse->maven->User Settings->Global Setting->setting.xml 
	-->
  	<modelVersion>4.0.0</modelVersion>
  	<groupId>com.javaweb</groupId>
  	<artifactId>JavaWeb2-integration-demo</artifactId>
  	<version>1.0.0</version>
  	<packaging>jar</packaging>
  	<!-- 打成war包 
  	1、 <packaging>war</packaging>
  	2、 添加tomcat依赖，用于编译和测试
  	    <dependency>
	    	<groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-tomcat</artifactId>
	        <scope>provided</scope>
 	    </dependency>
 	3、排除内置tomcat
 	<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
            	    <groupId>org.springframework.boot</groupId>
             	    <artifactId>spring-boot-starter-tomcat</artifactId>
         		</exclusion>
    	    </exclusions>
	</dependency>
  	4、 标记有@SpringBootApplication的类继承SpringBootServletInitializer，然后重写：
	   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
	       return application.sources(SampleController.class);
	   }
	5、添加项目名称
	<finalName>test</finalName>
	6、本地jar包引入
	<plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
                <webResources>
                    <resource>
                        <directory>src/main/resources/lib</directory>
                        <targetPath>WEB-INF/lib/</targetPath>
                        <includes>
                            <include>**/*.jar</include>
                        </includes>
                    </resource>
                </webResources>
            </configuration>
    </plugin>
    7、新建个类
    import java.io.File;
	import java.io.IOException;
	import java.util.Properties;
	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.env.EnvironmentPostProcessor;
	import org.springframework.core.env.ConfigurableEnvironment;
	import org.springframework.core.env.MutablePropertySources;
	import org.springframework.core.env.PropertiesPropertySource;
	import org.springframework.core.io.FileSystemResource;
	import org.springframework.core.io.support.PropertiesLoaderUtils;
	public class MyEnvironmentPostProcessor implements EnvironmentPostProcessor {
		 @Override
		 public void postProcessEnvironment(ConfigurableEnvironment configurableEnvironment, SpringApplication application) {
			 //tomcat路径
			 String property = System.getProperty("catalina.home");
			 //System.out.println("catalinahome:"+property);
			 String path =property+File.separator+"conf"+File.separator+"my.properties";
			 File file = new File(path);
			 //System.out.println("Loading local settings from : "+path);
			 if (file.exists()) {
				 MutablePropertySources propertySources = configurableEnvironment.getPropertySources();
				 Properties properties = loadProperties(file);
				 //System.out.println(properties.toString());
				 propertySources.addFirst(new PropertiesPropertySource("Config", properties));
			 }
		 }
		 private Properties loadProperties(File f) {
			 FileSystemResource resource = new FileSystemResource(f);
			 try {
				 return PropertiesLoaderUtils.loadProperties(resource);
			 } catch (IOException ex) {
				 throw new IllegalStateException("Failed to load local settings from " + f.getAbsolutePath(), ex);
			 }
		 }
	}
	//注：addFirst表示当外部配置文件与内部配置文件的内容一致时，以外部为准；addLast则相反
	8、根据新建的类，我这里的配置文件名称为：my.properties，将my.properties放置在所要部署的tomcat下的conf下
	9、在src/main/resources下新建META-INF，然后再在META-INF新建spring.factories，内容为：org.springframework.boot.env.EnvironmentPostProcessor=com.cpic.handler.MyEnvironmentPostProcessor
	-->

  	<properties>
  		<java.version>1.8</java.version>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<lucene.version>7.3.0</lucene.version>
    	<poi.version>4.1.2</poi.version>
  	</properties>
  	
  	<parent>
    	<groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.8.RELEASE</version>
    </parent>
    
    <dependencies>
        <dependency>
    		<groupId>com.javaweb</groupId>
	    	<artifactId>JavaWeb2-common</artifactId>
	    	<version>1.0.0</version>
    	</dependency>
        <!-- json-lib -->
		<dependency>
		    <groupId>net.sf.json-lib</groupId>
		    <artifactId>json-lib</artifactId>
		    <version>2.4</version>
		    <classifier>jdk15</classifier>
		</dependency>
    	<!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- validation -->
	   	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<!-- hbase -->
		<dependency>
		    <groupId>org.apache.hbase</groupId>
		    <artifactId>hbase-client</artifactId>
		    <version>2.1.1</version>
		</dependency>
		<!-- hbase use hadoop -->
    	<dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-hadoop</artifactId>
		    <version>2.5.0.RELEASE</version>
		</dependency>
		<!-- kafka -->
	    <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <!-- Netty -->
		<dependency>
		    <groupId>io.netty</groupId>
		    <artifactId>netty-all</artifactId>
		</dependency>
		<!-- solr --> 
    	<dependency>  
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-solr</artifactId> 
		</dependency>
		<!-- AOP -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!-- mongodb -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <!-- websocket -->
		<dependency>
		 	<groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<!-- elasticsearch --> 
		<dependency>  
	        <groupId>org.springframework.boot</groupId>  
	        <artifactId>spring-boot-starter-data-elasticsearch</artifactId>  
    	</dependency>
    	<!--  
    	<dependency>
        	<groupId>org.elasticsearch.client</groupId>
        	<artifactId>transport</artifactId>
    	</dependency>
    	<dependency>
       		<groupId>org.elasticsearch.plugin</groupId>
        	<artifactId>transport-netty4-client</artifactId>
    	</dependency>
    	-->
    	<!-- neo4j -->
		<dependency>
		 	<groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-neo4j</artifactId>
		</dependency>
		<!-- 验证码 -->
		<dependency>
			<groupId>com.github.penggle</groupId>
			<artifactId>kaptcha</artifactId>
			<version>2.3.2</version>
		</dependency>
		<!-- freemarker -->
	    <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<!-- 邮件发送 -->
	    <dependency>  
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<!-- redis -->
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-data-redis</artifactId>
	    </dependency>
	    <!-- redis use lettuce pool -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <dependency>
	      	<groupId>io.lettuce</groupId>
	      	<artifactId>lettuce-core</artifactId>
	    </dependency>
	    <!-- quartz定时任务 -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-quartz</artifactId>
		</dependency>
		<!-- lucene -->
		<dependency>  
	        <groupId>org.apache.lucene</groupId>  
	        <artifactId>lucene-core</artifactId> 
	        <version>${lucene.version}</version> 
	    </dependency>  
	    <dependency>  
	     	<groupId>org.apache.lucene</groupId>  
	        <artifactId>lucene-queryparser</artifactId>  
	        <version>${lucene.version}</version> 
	    </dependency>  
	    <dependency>  
	        <groupId>org.apache.lucene</groupId>  
	        <artifactId>lucene-analyzers-common</artifactId>  
	        <version>${lucene.version}</version> 
	    </dependency>  
		<dependency>
		    <groupId>org.apache.lucene</groupId>
		    <artifactId>lucene-queries</artifactId>
		    <version>${lucene.version}</version> 
		</dependency>
	    <dependency>  
		    <groupId>org.apache.lucene</groupId>  
		    <artifactId>lucene-highlighter</artifactId>  
		    <version>${lucene.version}</version> 
		</dependency>
		<dependency>  
		    <groupId>org.apache.lucene</groupId>  
		    <artifactId>lucene-analyzers-smartcn</artifactId>  
		    <version>${lucene.version}</version>
		</dependency>
		<!-- Spark -->
		<dependency>
		    <groupId>org.apache.spark</groupId>
		    <artifactId>spark-core_2.12</artifactId>
		    <version>2.4.5</version>
		</dependency>
		<!-- poi -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-excelant</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-contrib</artifactId>
			<version>3.6</version>
		</dependency>
	    <!-- 一维码（条形码） -->
		<dependency>
			<groupId>net.sf.barcode4j</groupId>
			<artifactId>barcode4j-light</artifactId>
			<version>2.0</version>
		</dependency>
		<!-- 二维码 -->
		<dependency>
		    <groupId>com.google.zxing</groupId>
		    <artifactId>core</artifactId>
		    <version>3.4.0</version>
		</dependency>
		<dependency>
		    <groupId>com.google.zxing</groupId>
		    <artifactId>javase</artifactId>
		    <version>3.4.0</version>
		</dependency>
	    <!-- activiti -->
		<dependency>
		    <groupId>org.activiti</groupId>
		    <artifactId>activiti-spring-boot-starter</artifactId>
		    <version>7.1.0.M6</version>
		</dependency>
		<!-- minio -->
		<dependency>
		    <groupId>io.minio</groupId>
		    <artifactId>minio</artifactId>
		    <version>7.1.4</version>
		</dependency>
	    <!-- SpringBatch批处理 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>
		<!-- fastdfs -->
		<dependency>
			<groupId>com.github.tobato</groupId>
			<artifactId>fastdfs-client</artifactId>
			<version>1.26.7</version>
		</dependency>
		<!-- 文件上传 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.4</version>
		</dependency>
		<!-- swagger -->
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger-ui</artifactId>
		    <version>2.9.2</version>
		</dependency>
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger2</artifactId>
		    <version>2.9.2</version>
		</dependency>
	</dependencies>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Hoxton.SR9</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<build>
		<!-- 修改打成的jar包名称 
		<finalName>test</finalName>
		-->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>com.javaweb.Application</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<!-- 指定打成的jar包位置 
						<configuration>
	                        <outputDirectory>H:/</outputDirectory>
	                        <overWriteReleases>false</overWriteReleases>
	                        <overWriteSnapshots>false</overWriteSnapshots>
	                        <overWriteIfNewer>true</overWriteIfNewer>
	                    </configuration>
	                    -->
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!-- 指定多个jar的批处理  
	1、windows
	@echo off
	H:
	cd test
	start cmd /c "java -jar test1.jar"
	start cmd /c "java -jar test2.jar"
	pause
	-->

</project>
